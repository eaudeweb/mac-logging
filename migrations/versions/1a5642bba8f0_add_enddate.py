"""add_enddate

Revision ID: 4cbcc4b21296
Revises: 3918ab1238f6
Create Date: 2018-06-04 12:12:48.989427

"""
from alembic import op
from datetime import datetime, timedelta
import sqlalchemy as sa
from sqlalchemy import (
    Column, ForeignKey, Integer, DateTime, String, Boolean
)
from sqlalchemy_utils import ChoiceType
from sqlalchemy.orm import sessionmaker, relationship
from flask_sqlalchemy import SQLAlchemy
from flask_security import UserMixin, RoleMixin

# revision identifiers, used by Alembic.
revision = '1a5642bba8f0'
down_revision = '3918ab1238f6'
branch_labels = None
depends_on = None


db = SQLAlchemy()
Session = sessionmaker()


class Role(db.Model, RoleMixin):
    __tablename__ = 'role'
    ROLES = [
        (u'superuser', u'Superuser'),
        (u'user', u'User')
    ]
    id = db.Column(db.Integer(), primary_key=True, autoincrement=True)
    name = db.Column(ChoiceType(ROLES), unique=True)
    users = Column(ForeignKey('user.id'))

    def __str__(self):
        return self.name.value


class User(db.Model, UserMixin):
    __tablename__ = 'user'
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    email = db.Column(db.String(255), unique=True)
    password = db.Column(db.String(255))
    active = db.Column(db.Boolean())
    person_id = Column(Integer, ForeignKey('person.id'))

    roles = relationship('Role', backref=db.backref('users_role'))

    def __str__(self):
        return self.email


class Address(db.Model):
    __tablename__ = 'address'
    DEVICES = [
        (u'mobile', u'Mobile'),
        (u'laptop', u'Laptop'),
        (u'desktop', u'Desktop')
    ]

    mac = Column(String(128), primary_key=True)
    device = Column(ChoiceType(DEVICES), nullable=False)
    person_id = Column(ForeignKey('person.id'))
    deleted = Column(Boolean, default=False)

    person = relationship('Person',
                          backref=db.backref('addresses', lazy='dynamic'))

    def __str__(self):
        return self.mac


class Person(db.Model):
    """ Person model """
    __tablename__ = 'person'
    id = Column(Integer, primary_key=True, autoincrement=True)
    last_name = Column(String(128), nullable=False)
    first_name = Column(String(128), nullable=False)
    user = relationship("User", uselist=False, backref="person")

    def __str__(self):
        return self.first_name + ' ' + self.last_name


class Entry(db.Model):
    __tablename__ = 'entry'
    id = Column(Integer, primary_key=True, autoincrement=True)
    mac_id = Column(ForeignKey('address.mac'))
    startdate = Column(DateTime, nullable=False)
    enddate = Column(DateTime)

    mac = relationship('Address',
                       backref=db.backref('entries', lazy='dynamic'))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('entry', sa.Column('enddate', sa.DateTime(), nullable=True))
    bind = op.get_bind()
    session = Session(bind=bind)
    entries = session.query(Entry).all()
    new_entries = []
    for entry in entries:
        new_entries.append({
            'mac_id': entry.mac_id,
            'startdate': entry.startdate,
            'enddate': entry.startdate + timedelta(hours=8),
        })
    op.drop_table('entry')
    op.create_table('entry',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('mac_id', sa.String(length=128), nullable=True),
                    sa.Column('startdate', sa.DateTime(), nullable=False),
                    sa.Column('enddate', sa.DateTime(), nullable=True),
                    sa.ForeignKeyConstraint(['mac_id'], ['address.mac'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.bulk_insert(Entry.__table__, new_entries)
    session.commit()
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('entry', 'enddate')
    # ### end Alembic commands ###
